# Task ID: 9
# Title: JSON 기반 아이템 시스템 및 인벤토리
# Status: pending
# Dependencies: 4, 8
# Priority: high
# Description: JSON 데이터 기반 아이템과 6슬롯 인벤토리, 레벨업 시 아이템 선택 UI를 구현합니다.
# Details:
data/items.json에서 아이템 데이터(이름, 설명, 효과, 아이콘)를 정의합니다. src/systems/inventory_system.py에서 6슬롯 제한 인벤토리를 구현하고, ItemComponent로 아이템 효과를 관리합니다. 레벨업 시 2개 아이템 중 1개를 선택하는 UI를 구현하며, 아이템 효과를 즉시 플레이어에게 적용하는 시스템을 만듭니다. 아이템 효과는 가산 방식으로 중첩되도록 구현합니다.

# Test Strategy:
아이템 데이터 로딩과 인벤토리 관리 로직을 테스트합니다. 아이템 효과 적용과 중첩 계산이 정확한지 검증하며, UI 상호작용이 올바르게 작동하는지 테스트합니다.

# Subtasks:
## 1. JSON 아이템 데이터 구조 설계 및 로딩 시스템 구현 [pending]
### Dependencies: None
### Description: data/items.json 파일 생성 및 ItemData 모델 정의, DataLoader를 통한 아이템 데이터 로딩 구현
### Details:
data/items.json에서 아이템 속성(이름, 설명, 효과 타입, 효과 값, 아이콘 경로)을 정의합니다. Pydantic ItemData 모델로 타입 안전성을 보장하고, DataLoader 클래스에 load_items() 메서드를 추가하여 JSON 파일을 로딩합니다. 아이템 효과는 ATTACK_SPEED, DAMAGE, HEALTH 등 열거형으로 관리합니다.

## 2. 6슬롯 인벤토리 관리 시스템 구현 [pending]
### Dependencies: 9.1
### Description: InventoryComponent 및 InventorySystem 구현으로 6개 슬롯 제한 아이템 보관 시스템 개발
### Details:
src/systems/inventory_system.py에서 InventoryComponent(최대 6개 슬롯)와 InventorySystem을 구현합니다. add_item(), remove_item(), is_full() 메서드로 인벤토리 관리를 담당하고, 아이템 중복 시 수량 증가 로직을 구현합니다. 인벤토리 상태 변화 시 INVENTORY_CHANGED 이벤트를 발생시킵니다.

## 3. ItemComponent 및 아이템 효과 적용 메커니즘 구현 [pending]
### Dependencies: 9.2
### Description: ItemComponent 정의 및 플레이어 스탯에 아이템 효과를 적용하는 시스템 구현
### Details:
src/components/item_component.py에서 ItemComponent(아이템 ID, 수량, 효과 목록)를 정의합니다. ItemEffectSystem에서 인벤토리 아이템들의 효과를 플레이어 스탯에 가산 방식으로 적용하는 calculate_total_effects() 메서드를 구현합니다. 실시간으로 아이템 효과가 플레이어에게 반영되도록 합니다.

## 4. 레벨업 시 아이템 선택 UI 시스템 구현 [pending]
### Dependencies: 9.3
### Description: 레벨업 이벤트 감지 및 2개 아이템 중 1개 선택하는 모달 UI 구현
### Details:
src/ui/item_selection_ui.py에서 ItemSelectionUI 클래스를 구현합니다. LEVEL_UP 이벤트 수신 시 랜덤한 2개 아이템을 제시하고, 마우스 클릭으로 선택할 수 있는 모달 창을 표시합니다. 선택된 아이템은 즉시 인벤토리에 추가되고 효과가 적용됩니다. ESC 키로 선택을 취소할 수 있는 기능도 포함합니다.

## 5. 아이템 효과 중첩 계산 및 최적화 로직 구현 [pending]
### Dependencies: 9.4
### Description: 동일 아이템의 효과 중첩 계산과 성능 최적화를 위한 캐싱 시스템 구현
### Details:
아이템 효과 중첩을 위한 EffectCalculator 클래스를 구현합니다. 동일 아이템 여러 개 보유 시 가산 방식으로 효과를 누적하고, 계산 결과를 캐싱하여 성능을 최적화합니다. 아이템 변경 시에만 효과를 재계산하도록 하고, 효과별 최대 한계치 설정 기능을 포함합니다.

