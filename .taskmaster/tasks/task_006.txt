# Task ID: 6
# Title: 자동 공격 및 투사체 시스템
# Status: pending
# Dependencies: 3, 5
# Priority: high
# Description: 시간 기반으로 가장 가까운 적을 자동 공격하는 시스템과 투사체를 구현합니다.
# Details:
src/systems/weapon_system.py에서 WeaponComponent를 정의하여 공격 속도, 사거리, 데미지를 관리합니다. 가장 가까운 적을 찾기 위한 거리 계산 함수를 구현하고, ProjectileComponent로 투사체의 방향, 속도, 수명을 관리합니다. ProjectileSystem에서 투사체 이동과 충돌 처리를 담당하며, 화면 밖으로 나간 투사체는 자동으로 제거합니다.

# Test Strategy:
자동 타겟팅이 정확히 가장 가까운 적을 선택하는지 테스트합니다. 투사체의 궤적과 충돌 감지, 수명 관리가 정상 동작하는지 검증합니다.

# Subtasks:
## 1. WeaponComponent와 자동 타겟팅 시스템 구현 [done]
### Dependencies: None
### Description: WeaponComponent 클래스를 정의하고 가장 가까운 적을 찾는 자동 타겟팅 로직을 구현합니다.
### Details:
src/systems/weapon_system.py에서 WeaponComponent 클래스를 만들어 공격 속도(attack_speed), 사거리(range), 데미지(damage) 속성을 관리합니다. WeaponSystem 클래스에서 거리 계산 함수를 구현하여 지정된 사거리 내의 적 엔티티 중 가장 가까운 대상을 선택하는 자동 타겟팅 로직을 만듭니다. 시간 기반 쿨다운 시스템을 구현하여 attack_speed에 따라 공격 주기를 제어합니다. WeaponComponent.projectile_type 에 따라 각자 다른 방식으로 동작을 하도록 하며, State 패턴을 사용해서 WeaponComponent 가 projectile_type의 타입과 구현 내용을 몰라도 동작할 수 있도록 합니다. 처음 구현은 basic 만하여 동작하는지 확인합니다.

## 2. ProjectileComponent와 투사체 물리 처리 [done]
### Dependencies: 6.1
### Description: 투사체의 이동과 물리적 특성을 관리하는 ProjectileComponent와 물리 시스템을 구현합니다.
### Details:
src/components/projectile_component.py에서 ProjectileComponent 클래스를 정의하여 투사체의 방향(direction), 속도(velocity), 수명(lifetime), 데미지(damage) 등을 관리합니다. ProjectileSystem에서 매 프레임마다 투사체의 위치를 업데이트하는 물리 처리 로직을 구현합니다. 투사체 생성 시 타겟 방향으로의 벡터 계산과 정규화를 통해 일정한 속도로 이동하도록 설정합니다. ProjectileSystem에서 개별 투사체의 구현을 알지 않아도 되도록, 코드 구조를 설계하여 작성 합니다.

## 3. 투사체 충돌 및 수명 관리 [done]
### Dependencies: 6.2
### Description: 투사체와 적의 충돌 감지, 수명 관리, 그리고 충돌 시 효과 처리를 구현합니다.
### Details:
ProjectileSystem에서 pygame.sprite.spritecollide를 활용한 투사체-적 충돌 감지를 구현합니다. 충돌 발생 시 적에게 데미지를 적용하고 투사체를 제거하는 로직을 만듭니다. 투사체 수명(lifetime)을 매 프레임마다 감소시켜 시간이 지나면 자동으로 제거되도록 구현합니다. 화면 경계를 벗어난 투사체도 자동 제거하여 메모리 누수를 방지합니다. 또한 해당 부분을 객체화 하여 효과적으로 유닛테스트를 할수 있도록 합니다.

## 4. 거리 계산 및 최적화 로직 [pending]
### Dependencies: 6.1
### Description: 효율적인 거리 계산과 타겟팅 성능 최적화를 구현합니다.
### Details:
numpy를 활용한 벡터화된 거리 계산 함수를 구현하여 다수의 적에 대한 거리 계산을 최적화합니다. 공간 분할(spatial partitioning) 기법을 적용하여 사거리 내의 적만 효율적으로 필터링하는 시스템을 만듭니다. 매 프레임마다 전체 적을 검색하는 대신 일정 간격(예: 0.1초)으로 타겟을 재선택하여 성능을 향상시킵니다. 거리 계산 시 제곱근 연산을 피하고 거리의 제곱값으로 비교하여 연산 비용을 절약합니다.

## 5. ProjectileComponent와 ProjectileSystem 유닛테스트 구현 [pending]
### Dependencies: 6.3
### Description: ProjectileComponent와 ProjectileSystem에 대한 포괄적인 유닛테스트를 구현합니다.
### Details:
구조화된 인터뷰 프로세스(@.claude/commands/interview-for-unit-test.md)를 통해 ProjectileComponent와 ProjectileSystem의 테스트 시나리오를 도출하고, 포괄적인 유닛테스트를 구현합니다. 투사체 생성, 이동, 충돌 처리, 수명 관리 등 모든 핵심 기능을 검증하는 테스트 케이스를 작성합니다. 개발자 가정은 assert로 처리하고, 비즈니스 로직은 테스트로 검증합니다. 한국어 테스트 메서드명과 상세한 docstring을 포함하여 프로젝트 표준을 준수합니다.

