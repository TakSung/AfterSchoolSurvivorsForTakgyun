# Task ID: 3
# Title: 충돌감지 및 물리 시스템 구현
# Status: done
# Dependencies: 1
# Priority: medium
# Description: 브루트포스 방식의 충돌감지 시스템과 기본 물리 계산 시스템을 구현합니다.
# Details:
src/systems/collision_system.py에서 AABB(Axis-Aligned Bounding Box) 기반 충돌감지를 구현합니다. CollisionComponent에 hitbox 크기와 collision mask를 정의합니다. PhysicsSystem에서 기본 벡터 연산을 통한 이동과 속도 계산을 구현합니다. 초기에는 O(n²) 브루트포스 방식으로 구현하되, 추후 Spatial Partitioning으로 교체 가능하도록 인터페이스를 추상화합니다.

# Test Strategy:
다양한 충돌 시나리오(정면 충돌, 모서리 충돌, 겹침)에 대한 단위 테스트를 작성합니다. 물리 계산의 정확성과 성능을 검증하는 테스트를 포함합니다.

# Subtasks:
## 1. AABB 충돌감지 알고리즘 구현 [done]
### Dependencies: None
### Description: Axis-Aligned Bounding Box 기반의 기본 충돌감지 로직을 구현합니다.
### Details:
src/systems/collision_system.py에서 CollisionSystem 클래스를 생성하고 AABB 충돌감지 함수를 구현합니다. 두 객체의 좌표와 크기를 비교하여 겹침을 판단하는 check_aabb_collision() 메서드를 작성합니다. x축과 y축 각각에서 겹침 여부를 확인하는 로직을 포함합니다.

## 2. CollisionComponent 설계 및 구현 [done]
### Dependencies: None
### Description: 충돌감지에 필요한 CollisionComponent를 설계하고 구현합니다.
### Details:
src/components/collision_component.py에서 CollisionComponent 클래스를 정의합니다. hitbox 크기(width, height), collision mask(적 타입별 충돌 여부), collision layer(충돌 계층) 속성을 포함합니다. 컴포넌트 초기화 시 기본값 설정과 유효성 검증 로직을 추가합니다.

## 3. PhysicsSystem 벡터 연산 구현 [done]
### Dependencies: None
### Description: 기본 물리 계산을 위한 PhysicsSystem의 벡터 연산을 구현합니다.
### Details:
src/systems/physics_system.py에서 PhysicsSystem 클래스를 생성합니다. 속도 벡터 계산, 위치 업데이트, 기본 중력 적용 등의 메서드를 구현합니다. numpy를 활용한 2D 벡터 연산 함수들(덧셈, 곱셈, 정규화)을 포함하며, 프레임 독립적인 시간 기반 계산을 적용합니다.

## 4. 브루트포스 충돌 처리 시스템 구현 [done]
### Dependencies: 3.1, 3.2
### Description: O(n²) 브루트포스 방식의 충돌 처리 메인 로직을 구현합니다.
### Details:
CollisionSystem에서 모든 엔티티 쌍에 대해 충돌을 검사하는 process_collisions() 메서드를 구현합니다. 충돌 발생 시 적절한 반응(피해 적용, 아이템 획득 등)을 처리하는 로직을 포함합니다. 성능 모니터링을 위한 충돌 검사 횟수 카운터를 추가합니다.

## 5. 확장성을 위한 인터페이스 추상화 [done]
### Dependencies: 3.3, 3.4
### Description: 추후 Spatial Partitioning 등으로 교체 가능한 추상 인터페이스를 구현합니다.
### Details:
src/systems/collision_system.py에서 ICollisionDetector 추상 클래스를 정의하고, BruteForceCollisionDetector를 구체 구현체로 만듭니다. 충돌감지 알고리즘을 쉽게 교체할 수 있도록 Strategy 패턴을 적용합니다. 향후 QuadTree, SpatialHash 등의 최적화된 알고리즘 교체를 위한 인터페이스를 설계합니다.

