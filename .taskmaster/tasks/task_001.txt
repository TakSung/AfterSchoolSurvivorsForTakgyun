# Task ID: 1
# Title: ECS 프레임워크 기반 구조 설정
# Status: done
# Dependencies: None
# Priority: high
# Description: Entity-Component-System 아키텍처 기반의 핵심 프레임워크를 구축하고 프로젝트 구조를 설정합니다.
# Details:
src/core/ 디렉토리에 Entity, Component, System 추상 클래스들을 정의합니다. EntityManager 클래스로 엔티티 생명주기를 관리하고, ComponentRegistry로 컴포넌트 타입별 저장소를 구현합니다. SystemOrchestrator 클래스로 시스템 실행 순서를 제어하는 구조를 만듭니다. Python 3.13+ 환경에서 pygame 2.6.0+, numpy 2.2.4+, pytest 8.0.0+, ruff 0.6.0+ 의존성을 설정합니다.

# Test Strategy:
각 ECS 컴포넌트의 기본 인터페이스가 정상 동작하는지 단위 테스트를 작성합니다. EntityManager의 엔티티 생성/삭제, ComponentRegistry의 컴포넌트 추가/제거, SystemOrchestrator의 시스템 등록/실행 순서를 검증합니다.

# Subtasks:
## 1. 프로젝트 구조 및 기본 디렉토리 설정 [done]
### Dependencies: None
### Description: src/core/, src/systems/, tests/ 등 ECS 아키텍처에 맞는 프로젝트 디렉토리 구조를 생성하고 초기 설정 파일들을 구성합니다.
### Details:
src/core/, src/systems/, src/components/, src/entities/, tests/ 디렉토리를 생성하고, __init__.py 파일들을 추가합니다. pyproject.toml에 프로젝트 메타데이터와 의존성을 정의하고, .gitignore와 기본 설정 파일들을 생성합니다.

## 7. 전체 시스템 구조 docs/design.md 문서를 작성 [done]
### Dependencies: None
### Description: 
### Details:
<info added on 2025-08-07T19:17:29.270Z>
ECS 프레임워크의 전체 시스템 구조를 설계하고 docs/design.md에 문서화합니다. Entity-Component-System 아키텍처의 핵심 개념과 클래스 관계를 정의하며, 각 시스템 간의 상호작용을 머메이드 다이어그램으로 시각화합니다. 구현 전 모든 개발자가 참조할 수 있는 설계 청사진을 제공하여 일관된 아키텍처 구현을 보장합니다.
</info added on 2025-08-07T19:17:29.270Z>

## 2. Entity, Component, System 추상 클래스 정의 [done]
### Dependencies: 1.1
### Description: ECS 아키텍처의 핵심인 Entity, Component, System의 기본 인터페이스와 추상 클래스를 정의합니다.
### Details:
src/core/entity.py에 Entity 클래스, src/core/component.py에 Component 추상 클래스, src/core/system.py에 System 추상 클래스를 정의합니다. 각 클래스는 고유 ID, 생명주기 관리, 상속 가능한 인터페이스를 포함해야 합니다.

## 3. EntityManager 클래스 구현 [done]
### Dependencies: 1.2
### Description: 엔티티의 생성, 삭제, 관리를 담당하는 EntityManager 클래스를 구현합니다.
### Details:
src/core/entity_manager.py에 EntityManager 클래스를 구현합니다. create_entity(), destroy_entity(), get_entity(), get_entities_with_component() 등의 메서드를 포함하며, 엔티티 ID 할당과 생명주기를 관리합니다. 약한 참조를 사용한 메모리 관리를 구현합니다.

## 4. ComponentRegistry 클래스 구현 [done]
### Dependencies: 1.2
### Description: 컴포넌트 타입별 저장소와 관리 기능을 제공하는 ComponentRegistry를 구현합니다.
### Details:
src/core/component_registry.py에 ComponentRegistry 클래스를 구현합니다. add_component(), remove_component(), get_component(), has_component() 메서드를 구현하고, 컴포넌트 타입별로 효율적인 저장 구조를 만듭니다. 타입 안전성과 빠른 조회를 위한 딕셔너리 기반 저장소를 구현합니다.

## 5. SystemOrchestrator 클래스 구현 [done]
### Dependencies: 1.2, 1.3, 1.4
### Description: 시스템들의 실행 순서를 제어하고 관리하는 SystemOrchestrator를 구현합니다.
### Details:
src/core/system_orchestrator.py에 SystemOrchestrator 클래스를 구현합니다. register_system(), unregister_system(), update_systems() 메서드를 포함하며, 시스템 우선순위와 실행 순서를 관리합니다. 시스템 간 의존성과 실행 그룹을 고려한 스케줄링을 구현합니다.

## 6. 의존성 설정 및 환경 구성 [done]
### Dependencies: 1.1
### Description: Python 3.13+, pygame 2.6.0+, numpy 2.2.4+ 등 필요한 의존성을 설정하고 개발 환경을 구성합니다.
### Details:
pyproject.toml에 pygame>=2.6.0, numpy>=2.2.4, pytest>=8.0.0, ruff>=0.6.0 의존성을 설정합니다. requirements.txt와 dev-requirements.txt를 생성하고, ruff와 pytest 설정 파일을 추가합니다. Python 가상환경 생성 스크립트와 설치 가이드를 작성합니다.

