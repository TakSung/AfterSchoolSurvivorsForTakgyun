# Task ID: 4
# Title: JSON 데이터 로딩 및 관리 시스템
# Status: pending
# Dependencies: 1
# Priority: medium
# Description: 게임 데이터(아이템, 적, 보스, 밸런스)를 JSON 파일로 관리하는 시스템을 구현합니다.
# Details:
src/data/ 디렉토리에 DataLoader 클래스를 구현하여 items.json, enemies.json, bosses.json, game_balance.json을 로딩합니다. 각 데이터 타입별로 Pydantic 모델을 정의하여 타입 안전성을 보장합니다. 데이터 유효성 검증과 기본값 설정 로직을 포함합니다. 런타임 중 데이터 리로딩 기능을 지원하여 밸런싱 조정을 용이하게 만듭니다.

# Test Strategy:
JSON 스키마 유효성 검증 테스트와 데이터 로딩 실패 시 적절한 에러 처리가 되는지 테스트합니다. 잘못된 JSON 형식이나 누락된 필드에 대한 예외 처리를 검증합니다.

# Subtasks:
## 1. DataLoader 클래스 구현 [pending]
### Dependencies: None
### Description: JSON 파일을 로딩하고 관리하는 핵심 DataLoader 클래스를 구현합니다.
### Details:
src/data/loader.py에 DataLoader 클래스를 구현하여 items.json, enemies.json, bosses.json, game_balance.json 파일을 비동기적으로 로딩하는 기능을 만듭니다. 파일 경로 관리, 캐싱 메커니즘, 에러 처리 로직을 포함하며, 싱글톤 패턴을 적용하여 데이터 로더의 유일성을 보장합니다.

## 2. Pydantic 모델 정의 [pending]
### Dependencies: 4.1
### Description: 각 데이터 타입별 Pydantic 모델을 정의하여 타입 안전성을 보장합니다.
### Details:
src/data/models.py에 Item, Enemy, Boss, GameBalance 등의 Pydantic 모델을 정의합니다. 각 모델에는 필수 필드 검증, 기본값 설정, 타입 변환 로직을 포함하며, Field validator를 사용하여 데이터 범위와 형식을 검증하는 기능을 구현합니다.

## 3. JSON 스키마 검증 시스템 [pending]
### Dependencies: 4.2
### Description: 로딩된 JSON 데이터의 유효성을 검증하는 스키마 검증 시스템을 구현합니다.
### Details:
src/data/validator.py에서 JSON 스키마 검증 시스템을 구현합니다. 잘못된 JSON 형식, 누락된 필드, 잘못된 데이터 타입에 대한 명확한 에러 메시지를 제공하며, 검증 실패 시 기본값으로 대체하거나 안전하게 종료하는 복구 전략을 포함합니다.

## 4. 런타임 데이터 리로딩 기능 구현 [deferred]
### Dependencies: 4.3
### Description: 게임 실행 중 데이터 파일을 다시 로딩할 수 있는 런타임 리로딩 기능을 구현합니다.
### Details:
src/data/reload_manager.py에서 파일 변경 감지와 런타임 리로딩 기능을 구현합니다. watchdog 라이브러리를 사용한 파일 시스템 모니터링, 리로딩 시 게임 상태 보존, 리로딩 실패 시 이전 데이터 복구 메커니즘을 포함하며, 개발 모드에서만 활성화되는 안전 장치를 구현합니다.

