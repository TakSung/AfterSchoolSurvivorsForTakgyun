# Task ID: 20
# Title: EnemyAISystem 월드 좌표 기반 재구현
# Status: pending
# Dependencies: 19
# Priority: medium
# Description: 월드 좌표를 기준으로 동작하는 적 AI 시스템을 구현하여 추적, 공격, 대기 상태를 처리한다.
# Details:
EnemyAISystem을 구현하여 플레이어 월드 위치를 기준으로 AI 동작을 처리한다. attack_range와 chase_range를 사용한 상태 기반 AI를 구현하고, 월드 좌표에서 방향 벡터를 계산하여 적의 이동을 처리한다. EnemyAIComponent에는 ai_type, attack_range, chase_range, movement_speed 필드를 포함한다. Vector2.normalize()를 사용한 방향 계산과 delta_time 기반 위치 업데이트를 구현한다.

# Test Strategy:
AI 상태 전환 로직을 테스트하고, 월드 좌표 기반 거리 계산을 검증한다. 적 추적 동작과 이동 속도 적용을 테스트하며, 다양한 AI 타입별 동작을 확인한다.

# Subtasks:
## 1. 월드 좌표 기반 거리 계산 및 상태 전환 로직 구현 [pending]
### Dependencies: None
### Description: 좌표계 추가로 인한 AI 시스템의 거리 계산을 월드 좌표 기준으로 재구현하고, attack_range와 chase_range를 활용한 상태 전환 로직을 구현합니다.
### Details:
CoordinateSystem을 활용하여 월드 좌표에서 적과 플레이어 간의 거리를 계산하는 로직을 구현합니다. EnemyAIComponent에 attack_range, chase_range, movement_speed 필드를 추가하고, 이를 기반으로 IDLE, CHASE, ATTACK 상태를 전환하는 로직을 작성합니다. 좌표계 변환이 필요한 부분에서 ICoordinateTransformer 인터페이스를 활용하여 화면-월드 간 변환을 처리합니다.

## 2. 월드 좌표 기반 방향 벡터 계산 및 정규화 구현 [pending]
### Dependencies: 20.1
### Description: 좌표계 변경에 따른 방향 계산을 월드 좌표 기준으로 재구현하고, Vector2 클래스를 활용한 정규화 처리를 구현합니다.
### Details:
월드 좌표에서 적의 현재 위치와 플레이어 위치를 기반으로 방향 벡터를 계산합니다. Vector2.normalize() 메서드를 사용하여 단위 벡터를 생성하고, 8방향 이동 제한이나 대각선 이동 속도 보정 등의 게임 로직을 구현합니다. 좌표계 변환 시 발생할 수 있는 정밀도 손실이나 성능 문제를 고려하여 최적화된 계산 방식을 구현합니다.

## 3. 월드 좌표 기반 적 이동 처리 및 AI 시스템 통합 테스트 [pending]
### Dependencies: 20.2
### Description: 좌표계 기반 이동 로직을 구현하고, 전체 AI 시스템이 새로운 좌표계에서 정상 동작하는지 통합 테스트를 수행합니다.
### Details:
delta_time을 활용한 월드 좌표 기반 위치 업데이트 로직을 구현합니다. EnemyAISystem에서 CoordinateSystem과 연동하여 적의 월드 위치를 업데이트하고, 화면 렌더링을 위한 스크린 좌표 변환을 처리합니다. AI 상태별 동작 테스트, 좌표 변환 정확성 테스트, 다양한 AI 타입별 동작 검증을 포함한 통합 테스트를 구현하여 기존 AI 로직이 새로운 좌표계에서 올바르게 작동하는지 확인합니다.

