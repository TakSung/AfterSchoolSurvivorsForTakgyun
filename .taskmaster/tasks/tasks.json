{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "ECS 프레임워크 기반 구조 설정",
        "description": "Entity-Component-System 아키텍처 기반의 핵심 프레임워크를 구축하고 프로젝트 구조를 설정합니다.",
        "details": "src/core/ 디렉토리에 Entity, Component, System 추상 클래스들을 정의합니다. EntityManager 클래스로 엔티티 생명주기를 관리하고, ComponentRegistry로 컴포넌트 타입별 저장소를 구현합니다. SystemOrchestrator 클래스로 시스템 실행 순서를 제어하는 구조를 만듭니다. Python 3.13+ 환경에서 pygame 2.6.0+, numpy 2.2.4+, pytest 8.0.0+, ruff 0.6.0+ 의존성을 설정합니다.",
        "testStrategy": "각 ECS 컴포넌트의 기본 인터페이스가 정상 동작하는지 단위 테스트를 작성합니다. EntityManager의 엔티티 생성/삭제, ComponentRegistry의 컴포넌트 추가/제거, SystemOrchestrator의 시스템 등록/실행 순서를 검증합니다.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "게임 루프 및 기본 렌더링 시스템 구현",
        "description": "60fps/40fps 게임 루프와 pygame 기반 기본 렌더링 시스템을 구현합니다.",
        "details": "src/core/game_loop.py에서 pygame.time.Clock을 사용한 고정 시간 간격 게임 루프를 구현합니다. RenderSystem 클래스에서 pygame.sprite.Group을 활용한 기본 스프라이트 렌더링을 구현합니다. 화면 해상도와 FPS 설정을 외부에서 조정 가능하도록 설정 파일을 만듭니다. 게임 상태 관리(RUNNING, PAUSED, STOPPED)를 포함합니다.",
        "testStrategy": "빈 게임 월드에서 40+ FPS가 안정적으로 유지되는지 성능 테스트를 실행합니다. 게임 루프의 시간 정확성과 렌더링 시스템의 기본 동작을 검증하는 통합 테스트를 작성합니다.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "충돌감지 및 물리 시스템 구현",
        "description": "브루트포스 방식의 충돌감지 시스템과 기본 물리 계산 시스템을 구현합니다.",
        "details": "src/systems/collision_system.py에서 AABB(Axis-Aligned Bounding Box) 기반 충돌감지를 구현합니다. CollisionComponent에 hitbox 크기와 collision mask를 정의합니다. PhysicsSystem에서 기본 벡터 연산을 통한 이동과 속도 계산을 구현합니다. 초기에는 O(n²) 브루트포스 방식으로 구현하되, 추후 Spatial Partitioning으로 교체 가능하도록 인터페이스를 추상화합니다.",
        "testStrategy": "다양한 충돌 시나리오(정면 충돌, 모서리 충돌, 겹침)에 대한 단위 테스트를 작성합니다. 물리 계산의 정확성과 성능을 검증하는 테스트를 포함합니다.",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "JSON 데이터 로딩 및 관리 시스템",
        "description": "게임 데이터(아이템, 적, 보스, 밸런스)를 JSON 파일로 관리하는 시스템을 구현합니다.",
        "details": "src/data/ 디렉토리에 DataLoader 클래스를 구현하여 items.json, enemies.json, bosses.json, game_balance.json을 로딩합니다. 각 데이터 타입별로 Pydantic 모델을 정의하여 타입 안전성을 보장합니다. 데이터 유효성 검증과 기본값 설정 로직을 포함합니다. 런타임 중 데이터 리로딩 기능을 지원하여 밸런싱 조정을 용이하게 만듭니다.",
        "testStrategy": "JSON 스키마 유효성 검증 테스트와 데이터 로딩 실패 시 적절한 에러 처리가 되는지 테스트합니다. 잘못된 JSON 형식이나 누락된 필드에 대한 예외 처리를 검증합니다.",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "플레이어 마우스 이동 시스템",
        "description": "마우스 커서를 따라 플레이어가 자동으로 이동하는 시스템을 구현합니다.",
        "details": "src/systems/movement_system.py에서 pygame.mouse.get_pos()를 사용해 마우스 위치를 추적합니다. PlayerMovementComponent에 이동 속도와 목표 지점을 저장합니다. 벡터 계산을 통해 플레이어와 마우스 사이의 방향과 거리를 계산하고, 부드러운 이동을 위해 선형 보간(lerp)을 적용합니다. 화면 경계를 벗어나지 않도록 boundary checking을 구현합니다.",
        "testStrategy": "마우스 위치 변화에 따른 플레이어 이동 방향과 속도가 정확한지 테스트합니다. 경계 조건(화면 모서리, 마우스와 플레이어가 겹치는 경우)에 대한 테스트를 포함합니다.",
        "priority": "high",
        "dependencies": [
          2,
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "자동 공격 및 투사체 시스템",
        "description": "시간 기반으로 가장 가까운 적을 자동 공격하는 시스템과 투사체를 구현합니다.",
        "details": "src/systems/weapon_system.py에서 WeaponComponent를 정의하여 공격 속도, 사거리, 데미지를 관리합니다. 가장 가까운 적을 찾기 위한 거리 계산 함수를 구현하고, ProjectileComponent로 투사체의 방향, 속도, 수명을 관리합니다. ProjectileSystem에서 투사체 이동과 충돌 처리를 담당하며, 화면 밖으로 나간 투사체는 자동으로 제거합니다.",
        "testStrategy": "자동 타겟팅이 정확히 가장 가까운 적을 선택하는지 테스트합니다. 투사체의 궤적과 충돌 감지, 수명 관리가 정상 동작하는지 검증합니다.",
        "priority": "high",
        "dependencies": [
          3,
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "기본 적 AI 및 스포너 시스템",
        "description": "플레이어를 추격하고 공격하는 기본 적 AI와 적 생성 시스템을 구현합니다.",
        "details": "src/systems/ai_system.py에서 EnemyAIComponent를 정의하여 AI 상태(PATROL, CHASE, ATTACK)를 관리합니다. 적과 플레이어 사이의 거리에 따라 행동을 결정하는 상태 기반 AI를 구현합니다. EnemySpawner 클래스로 일정 시간마다 화면 가장자리에서 적을 생성하며, 시간 경과에 따라 난이도가 증가하도록 적 능력치를 조정합니다. 적의 체력, 공격력, 이동 속도를 JSON 데이터로 관리합니다.",
        "testStrategy": "AI 상태 전환 로직이 거리와 조건에 따라 정확히 동작하는지 테스트합니다. 적 스포너의 시간 기반 생성과 난이도 조정이 의도대로 작동하는지 검증합니다.",
        "priority": "medium",
        "dependencies": [
          3,
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "경험치 및 레벨업 시스템",
        "description": "적 처치 시 경험치 획득과 레벨업 메커니즘을 구현합니다.",
        "details": "src/systems/experience_system.py에서 ExperienceComponent를 정의하여 현재 경험치, 레벨, 필요 경험치를 관리합니다. 적 처치 시 경험치를 부여하는 이벤트 시스템을 구현하고, 레벨업 시 필요 경험치를 증가시키는 공식을 적용합니다. 레벨업 시 LEVEL_UP 이벤트를 발생시켜 다른 시스템에서 반응할 수 있도록 합니다. UI에서 경험치 바를 표시하기 위한 렌더링 컴포넌트를 구현합니다.",
        "testStrategy": "경험치 계산과 레벨업 조건이 정확한지 테스트합니다. 레벨업 이벤트가 적절히 발생하고 다른 시스템에 전달되는지 검증합니다.",
        "priority": "medium",
        "dependencies": [
          6,
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "JSON 기반 아이템 시스템 및 인벤토리",
        "description": "JSON 데이터 기반 아이템과 6슬롯 인벤토리, 레벨업 시 아이템 선택 UI를 구현합니다.",
        "details": "data/items.json에서 아이템 데이터(이름, 설명, 효과, 아이콘)를 정의합니다. src/systems/inventory_system.py에서 6슬롯 제한 인벤토리를 구현하고, ItemComponent로 아이템 효과를 관리합니다. 레벨업 시 2개 아이템 중 1개를 선택하는 UI를 구현하며, 아이템 효과를 즉시 플레이어에게 적용하는 시스템을 만듭니다. 아이템 효과는 가산 방식으로 중첩되도록 구현합니다.",
        "testStrategy": "아이템 데이터 로딩과 인벤토리 관리 로직을 테스트합니다. 아이템 효과 적용과 중첩 계산이 정확한지 검증하며, UI 상호작용이 올바르게 작동하는지 테스트합니다.",
        "priority": "high",
        "dependencies": [
          4,
          8
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "룰 엔진 기반 시너지 시스템",
        "description": "특정 아이템 조합 시 추가 효과가 발생하는 룰 엔진 기반 시너지 시스템을 구현합니다.",
        "details": "src/systems/synergy_system.py에서 룰 엔진을 구현하여 아이템 조합 패턴을 검사합니다. data/synergies.json에서 시너지 규칙(조합 아이템 목록, 추가 효과)을 정의합니다. 인벤토리 변경 시마다 활성 시너지를 재계산하고, 시너지 효과를 플레이어 스탯에 적용합니다. 축구화+축구공=15% 데미지 증가 등의 기본 시너지를 구현하며, 시너지 효과에 최대치 제한(데미지 300%, 공격속도 200%)을 설정합니다.",
        "testStrategy": "다양한 아이템 조합에 대한 시너지 인식과 효과 적용을 테스트합니다. 시너지 규칙 변경 시 실시간 반영과 최대치 제한이 정상 작동하는지 검증합니다.",
        "priority": "medium",
        "dependencies": [
          9
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "교장선생님 보스 시스템",
        "description": "1분 30초마다 등장하는 교장선생님 보스와 훈화 말씀 패턴을 구현합니다.",
        "details": "src/systems/boss_system.py에서 BossSpawner를 구현하여 90초마다 교장선생님을 소환합니다. BossAI 클래스에서 훈화 말씀 알파(스턴) → 베타(광역 공격) 패턴을 구현합니다. 보스 공격 전 시각적 예고(경고 표시)와 디버프 적용 시스템을 만듭니다. 미션 시스템으로 디버프 해제 조건(특정 적 처치, 시간 경과 등)을 구현하며, 보스 처치 시 추가 보상을 제공합니다.",
        "testStrategy": "보스 등장 타이밍과 패턴 실행이 정확한지 테스트합니다. 디버프 적용과 미션 시스템 연동, 보스 AI 상태 전환이 의도대로 작동하는지 검증합니다.",
        "priority": "medium",
        "dependencies": [
          7,
          8
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "UI 시스템 및 게임 상태 표시",
        "description": "체력바, 경험치바, 아이템 인벤토리 등 핵심 게임 UI를 구현합니다.",
        "details": "src/ui/ 디렉토리에 UISystem을 구현하여 HUD 요소들을 관리합니다. HealthBar, ExperienceBar, InventoryUI, ItemSelectionUI 클래스를 만들어 각각의 UI 요소를 담당하게 합니다. pygame을 사용한 텍스트 렌더링과 프로그레스 바 표시를 구현하며, 레벨업 시 아이템 선택 모달 UI를 만듭니다. 데미지 숫자와 레벨업 이펙트 등 시각적 피드백을 추가합니다.",
        "testStrategy": "UI 요소들이 게임 상태 변화에 따라 정확히 업데이트되는지 테스트합니다. 아이템 선택 UI의 상호작용과 시각적 피드백이 올바르게 작동하는지 검증합니다.",
        "priority": "medium",
        "dependencies": [
          8,
          9
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-08-07T18:01:58.038Z",
      "updated": "2025-08-07T18:01:58.038Z",
      "description": "Tasks for master context"
    }
  }
}