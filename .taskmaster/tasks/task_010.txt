# Task ID: 10
# Title: 룰 엔진 기반 시너지 시스템
# Status: pending
# Dependencies: 9
# Priority: medium
# Description: 특정 아이템 조합 시 추가 효과가 발생하는 룰 엔진 기반 시너지 시스템을 구현합니다.
# Details:
src/systems/synergy_system.py에서 룰 엔진을 구현하여 아이템 조합 패턴을 검사합니다. data/synergies.json에서 시너지 규칙(조합 아이템 목록, 추가 효과)을 정의합니다. 인벤토리 변경 시마다 활성 시너지를 재계산하고, 시너지 효과를 플레이어 스탯에 적용합니다. 축구화+축구공=15% 데미지 증가 등의 기본 시너지를 구현하며, 시너지 효과에 최대치 제한(데미지 300%, 공격속도 200%)을 설정합니다.

# Test Strategy:
다양한 아이템 조합에 대한 시너지 인식과 효과 적용을 테스트합니다. 시너지 규칙 변경 시 실시간 반영과 최대치 제한이 정상 작동하는지 검증합니다.

# Subtasks:
## 1. 룰 엔진 아키텍처 설계 및 기본 구조 구현 [pending]
### Dependencies: None
### Description: 시너지 시스템의 핵심이 되는 룰 엔진의 기본 아키텍처를 설계하고 구현합니다.
### Details:
src/systems/synergy_system.py에 SynergyRuleEngine 클래스를 생성하고, 규칙 로딩, 패턴 매칭, 효과 계산을 담당하는 기본 인터페이스를 정의합니다. Rule, Pattern, Effect 등의 기본 데이터 클래스들을 구현하여 시너지 규칙의 구조를 명확히 합니다.

## 2. 시너지 패턴 매칭 알고리즘 구현 [pending]
### Dependencies: 10.1
### Description: 아이템 조합을 분석하여 시너지 패턴을 찾는 핵심 알고리즘을 구현합니다.
### Details:
PatternMatcher 클래스를 구현하여 현재 인벤토리의 아이템들이 정의된 시너지 패턴과 일치하는지 효율적으로 검사합니다. 여러 시너지가 동시에 활성화될 수 있는 경우와 우선순위 처리 로직을 포함합니다.

## 3. JSON 기반 시너지 규칙 관리 시스템 [pending]
### Dependencies: 10.1
### Description: data/synergies.json 파일을 통해 시너지 규칙을 관리하는 시스템을 구현합니다.
### Details:
축구화+축구공=15% 데미지 증가 등의 기본 시너지 규칙을 JSON 형태로 정의하고, 런타임에 이를 로딩하여 룰 엔진에 적용하는 SynergyRuleLoader 클래스를 구현합니다. 규칙 검증 및 오류 처리 로직도 포함합니다.

## 4. 실시간 시너지 계산 및 효과 적용 [pending]
### Dependencies: 10.2, 10.3
### Description: 인벤토리 변경 시마다 활성 시너지를 실시간으로 계산하고 플레이어 스탯에 적용합니다.
### Details:
SynergyCalculator 클래스를 구현하여 인벤토리 변경 이벤트를 감지하고, 활성화된 시너지 효과를 플레이어의 스탯에 실시간으로 적용/해제합니다. 시너지 효과의 누적 계산과 스탯 수정자 시스템과의 연동을 구현합니다.

## 5. 최대치 제한 및 밸런싱 시스템 [pending]
### Dependencies: 10.4
### Description: 시너지 효과에 최대치 제한을 적용하여 게임 밸런스를 유지합니다.
### Details:
데미지 300%, 공격속도 200% 등의 시너지 효과 최대치 제한을 설정하고, BalancingManager 클래스를 통해 이를 관리합니다. 시너지 효과가 설정된 최대치를 넘지 않도록 하는 캡핑 로직과 경고 시스템을 구현합니다.

## 6. 시너지 시스템 성능 최적화 [pending]
### Dependencies: 10.4, 10.5
### Description: 룰 엔진의 패턴 매칭과 효과 계산 성능을 최적화합니다.
### Details:
시너지 패턴 매칭 알고리즘을 최적화하여 대량의 아이템과 복잡한 시너지 규칙에서도 60fps를 유지하도록 합니다. 캐싱 메커니즘, 지연 계산, 인덱싱 등의 기법을 적용하여 성능을 개선하고, 프로파일링을 통해 병목점을 식별하고 해결합니다.

