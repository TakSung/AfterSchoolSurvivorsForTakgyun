# Task ID: 22
# Title: 통합 시스템 조정 및 게임 루프 최적화
# Status: pending
# Dependencies: 21
# Priority: high
# Description: 모든 좌표계 관련 시스템을 통합하고, 40+ FPS 목표를 달성하기 위한 게임 루프 최적화를 수행한다.
# Details:
SystemOrchestrator에서 시스템 실행 순서를 최적화하여 CameraSystem → PlayerMovementSystem → EnemyAISystem → AutoAttackSystem → RenderSystem 순으로 처리한다. CoordinateManager의 프레임 진행 관리와 캐시 무효화 타이밍을 조정한다. 성능 모니터링을 위한 FPS 카운터와 좌표 변환 호출 수 추적을 구현한다. 적 20마리와 투사체 상황에서 40+ FPS 달성을 목표로 한다.

# Test Strategy:
통합 테스트로 전체 게임 루프의 안정성을 검증하고, 성능 프로파일링으로 병목 지점을 식별한다. 다양한 게임 상황에서 FPS 안정성을 측정하고, 메모리 사용량을 모니터링한다.

# Subtasks:
## 1. SystemOrchestrator 실행 순서 최적화 구현 [pending]
### Dependencies: None
### Description: 좌표계 시스템을 포함한 전체 시스템의 실행 순서를 최적화하여 CameraSystem → CoordinateManager → PlayerMovementSystem → EnemyAISystem → AutoAttackSystem → CollisionSystem → RenderSystem 순으로 처리하도록 SystemOrchestrator를 수정한다.
### Details:
SystemOrchestrator.update() 메서드에서 시스템 실행 순서를 명시적으로 정의하고, 좌표 변환이 필요한 시스템들 간의 의존성을 고려한 실행 순서를 구현한다. ExecutionPhase enum(COORDINATE_UPDATE, MOVEMENT, AI_LOGIC, COLLISION, RENDER)을 정의하여 각 단계별로 시스템을 분류하고 순차 실행한다. 시스템 간 데이터 흐름을 최적화하여 불필요한 좌표 변환을 최소화한다.

## 2. 좌표 변환 캐시 관리 시스템 구현 [pending]
### Dependencies: 22.1
### Description: CoordinateManager의 캐시 무효화 타이밍을 최적화하고, 프레임별 캐시 관리 전략을 구현하여 좌표 변환 성능을 극대화한다.
### Details:
CoordinateManager에 frame_begin()과 frame_end() 메서드를 추가하여 프레임 단위 캐시 관리를 구현한다. 카메라 이동이나 줌 변경 시에만 캐시를 무효화하는 스마트 캐시 전략을 적용한다. 변환 빈도가 높은 좌표는 LRU 캐시로 관리하고, 프레임당 최대 캐시 엔트리 수를 제한하여 메모리 사용량을 조절한다. 캐시 히트율과 변환 호출 수를 추적하는 디버그 정보를 제공한다.

## 3. 성능 모니터링 시스템 구현 [pending]
### Dependencies: 22.1
### Description: FPS 카운터, 좌표 변환 호출 수, 시스템별 처리 시간을 추적하는 성능 모니터링 시스템을 구현한다.
### Details:
PerformanceMonitor 클래스를 구현하여 각 시스템의 실행 시간을 측정하고, 좌표 변환 호출 횟수와 캐시 히트율을 추적한다. FPS 계산과 평균/최소/최대 FPS 통계를 제공한다. 성능 데이터를 JSON 형태로 저장하여 분석할 수 있도록 한다. 디버그 모드에서 화면에 실시간 성능 정보를 표시하는 UI를 구현한다. 성능 임계값을 설정하여 경고를 출력하는 기능을 포함한다.

## 4. FPS 안정성 확보 및 프레임 제한 구현 [pending]
### Dependencies: 22.2, 22.3
### Description: 40+ FPS 목표 달성을 위한 프레임 제한과 안정화 메커니즘을 구현하여 다양한 게임 상황에서 일정한 성능을 보장한다.
### Details:
pygame.time.Clock을 사용한 프레임 제한을 구현하고, 적응적 품질 조정 시스템을 추가한다. 적이 20마리 이상이거나 투사체가 많을 때 자동으로 렌더링 품질을 조정하는 기능을 구현한다. delta_time 기반의 시간 독립적인 업데이트 로직을 모든 시스템에 적용한다. 프레임 드랍이 발생할 때 비필수적인 시각 효과를 일시적으로 비활성화하는 성능 보호 기능을 추가한다.

## 5. 메모리 사용량 최적화 및 통합 테스트 [pending]
### Dependencies: 22.4
### Description: 전체 시스템의 메모리 사용량을 최적화하고, 통합 테스트를 통해 40+ FPS 목표 달성과 시스템 안정성을 검증한다.
### Details:
메모리 풀링을 사용하여 Entity와 Component 객체 생성/소멸 비용을 최소화한다. 불필요한 객체 참조를 제거하고 가비지 컬렉션 부하를 줄이는 메모리 관리를 구현한다. 적 20마리, 투사체 50개, 아이템 10개가 동시에 존재하는 상황에서 40+ FPS를 유지하는지 통합 테스트를 수행한다. memory_profiler를 사용한 메모리 사용량 분석과 성능 병목 지점을 식별하는 프로파일링을 실시한다. 전체 시스템의 안정성과 성능 목표 달성을 종합적으로 검증한다.

