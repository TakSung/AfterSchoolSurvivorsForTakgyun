{
	"meta": {
		"generatedAt": "2025-08-25T05:38:53.269Z",
		"tasksAnalyzed": 10,
		"totalTasks": 10,
		"analysisCount": 10,
		"thresholdScore": 5,
		"projectName": "Taskmaster",
		"usedResearch": true
	},
	"complexityAnalysis": [
		{
			"taskId": 44,
			"taskTitle": "ECS Foundation Layer 핵심 인터페이스 정의",
			"complexityScore": 8,
			"recommendedSubtasks": 6,
			"expansionPrompt": "Entity 순수 식별자 클래스, Component ABC 기본 클래스(validate, serialize, deserialize, copy, shallow_copy, merge_from, diff, is_equal_to 메서드 포함), ComponentRegistry 타입 관리 시스템, SystemOrchestrator 시스템 실행 순서 제어를 각각 별도 서브태스크로 분리하여 구현. Python 3.13+ 네이티브 타입 힌트와 dataclass 기반으로 설계.",
			"reasoning": "ECS 아키텍처의 핵심 기반이 되는 복합적인 인터페이스 설계로, 추상화 수준이 높고 다양한 메서드 구현이 필요하여 복잡도가 높음. 각 컴포넌트별로 분리하여 점진적 구현이 필요."
		},
		{
			"taskId": 45,
			"taskTitle": "SharedEventQueue 3-Layer 이벤트 시스템 구현",
			"complexityScore": 9,
			"recommendedSubtasks": 7,
			"expansionPrompt": "ISharedEventQueue<T> 제네릭 인터페이스 설계, IEventTunnelManager 터널 관리 시스템, IEventProducer<T>/IEventConsumer<T>/IEventSubscriber<T> 각 인터페이스 구현, SharedEventQueue 스레드 안전성 구현, 불변성 보장 메커니즘, 배치 처리 기능을 각각 서브태스크로 분리하여 구현.",
			"reasoning": "멀티스레딩, 타입 안전성, 불변성 보장 등 고급 동시성 프로그래밍이 필요한 매우 복잡한 시스템. Producer-Consumer-Subscriber 패턴의 정확한 구현과 성능 최적화가 핵심."
		},
		{
			"taskId": 46,
			"taskTitle": "핵심 게임 컴포넌트들 ECS 기반 재구현",
			"complexityScore": 7,
			"recommendedSubtasks": 5,
			"expansionPrompt": "기존 컴포넌트들을 Component 기반 클래스로 재구현: Position/Render/Velocity 기본 컴포넌트, Player/Enemy/Weapon 게임 로직 컴포넌트, Health/Collision/Camera 상태 컴포넌트, IntEnum 다층 패턴 적용, WeaponType/EnemyType/PlayerStatus/GameState/ItemType Enum 정의를 각각 분리하여 구현.",
			"reasoning": "10개 컴포넌트와 5개 Enum을 재구현해야 하는 중규모 리팩토링 작업. IntEnum 성능 패턴 적용과 다층 구조 설계가 필요하여 복잡도가 높음."
		},
		{
			"taskId": 47,
			"taskTitle": "Manager 계층 인터페이스 및 DTO 설계",
			"complexityScore": 6,
			"recommendedSubtasks": 4,
			"expansionPrompt": "도메인별 Manager 인터페이스 정의 (IEnemyManager/IWeaponManager/IProjectileManager), 인프라 Manager 인터페이스 정의 (ICoordinateManager/IDifficultyManager/IGameStateManager/IConfigurationManager), DTO 클래스들 설계 (EnemyCreateDTO/WeaponCreateDTO/ProjectileCreateDTO), DTO 유효성 검증 및 ECS Component 변환 메서드 구현을 분리하여 진행.",
			"reasoning": "인터페이스 설계와 DTO 패턴은 비교적 표준적인 구현이지만, 타입 안전성과 ECS 컴포넌트 변환 로직이 필요하여 중간 수준의 복잡도."
		},
		{
			"taskId": 48,
			"taskTitle": "Strategy Pattern 기반 공격/타겟팅 전략 구현",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "IAttackStrategy와 ITargetingStrategy 인터페이스 정의, 공격 전략 구현 (DirectAttackStrategy/AreaAttackStrategy/HomingAttackStrategy), 타겟팅 전략 구현 (ClosestTargetingStrategy/LowestHealthTargetingStrategy/HighestThreatTargetingStrategy)을 각각 분리하여 구현.",
			"reasoning": "Strategy 패턴은 잘 정립된 디자인 패턴으로 구현이 비교적 명확함. 순수 함수 기반 계산이 주요 작업이므로 중간 수준의 복잡도."
		},
		{
			"taskId": 49,
			"taskTitle": "Strategy Pattern 기반 스폰/이동 전략 구현",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "ISpawnStrategy와 IMovementStrategy 인터페이스 정의, 스폰 전략 구현 (RandomSpawnStrategy/WaveSpawnStrategy/CircularSpawnStrategy), 이동 전략 구현 (DirectMovementStrategy/SmoothFollowStrategy/PatrolMovementStrategy)을 각각 분리하여 구현.",
			"reasoning": "Task 48과 유사한 Strategy 패턴 적용으로 구현 복잡도는 비슷함. 수학적 계산과 위치/벡터 연산이 주요 작업."
		},
		{
			"taskId": 50,
			"taskTitle": "Domain Manager 구현체 개발",
			"complexityScore": 6,
			"recommendedSubtasks": 4,
			"expansionPrompt": "EnemyManager 구현체 (엔티티 생성 및 컴포넌트 자동 추가), WeaponManager 구현체 (시너지 계산 및 쿨다운 관리), ProjectileManager 구현체 (물리 업데이트 및 충돌 처리), Manager들의 EntityManager/ComponentRegistry 연동 및 CRUD 기능 통합을 각각 분리하여 구현.",
			"reasoning": "인터페이스 구현체 작업이지만 ECS 시스템과의 복잡한 연동과 도메인 로직이 포함되어 중간 수준의 복잡도. 각 Manager별 특화된 기능 구현이 필요."
		},
		{
			"taskId": 51,
			"taskTitle": "Strategy Pattern 적용 게임 시스템 구현",
			"complexityScore": 7,
			"recommendedSubtasks": 5,
			"expansionPrompt": "IEventAwareSystem 인터페이스 정의, WeaponSystem 구현 (공격 조건 확인 및 Strategy 활용), EnemySystem 구현 (스폰 조건 확인 및 Strategy 활용), ProjectileSystem 구현, 의존성 주입 및 이벤트 Producer 통합을 각각 분리하여 구현.",
			"reasoning": "Strategy 패턴, 의존성 주입, 이벤트 시스템이 결합된 복합적인 시스템 구현. 각 시스템별 특화된 로직과 이벤트 연동이 필요하여 복잡도가 높음."
		},
		{
			"taskId": 52,
			"taskTitle": "이벤트 기반 시스템 통합 및 EventTunnelManager 구현",
			"complexityScore": 8,
			"recommendedSubtasks": 6,
			"expansionPrompt": "EventTunnelManager 구현 (이벤트 타입별 터널 관리), 각 이벤트 타입 정의 (EnemyDeathEvent/WeaponAttackEvent/LevelUpEvent 등), Producer/Consumer/Subscriber 할당 시스템, ExperienceSystem과 UISystem의 이벤트 기반 통신 구현, 이벤트 플로우 end-to-end 검증 시스템을 분리하여 구현.",
			"reasoning": "전체 시스템을 이벤트 기반으로 통합하는 대규모 아키텍처 작업. 다양한 이벤트 타입과 시스템 간 복잡한 통신 패턴을 구현해야 하여 높은 복잡도."
		},
		{
			"taskId": 53,
			"taskTitle": "SystemOrchestrator 통합 및 성능 최적화",
			"complexityScore": 9,
			"recommendedSubtasks": 7,
			"expansionPrompt": "SystemOrchestrator에 모든 시스템 등록, SystemPriority 기반 실행 순서 결정 알고리즘, 의존성 검증 및 토폴로지 정렬 구현, 시스템별 성능 통계 수집 시스템, 메모리 사용량 모니터링, 60 FPS 목표 성능 최적화 (적 100개 + 투사체 200개), 장시간 실행 안정성 보장을 각각 분리하여 구현.",
			"reasoning": "전체 시스템의 통합과 성능 최적화가 결합된 최고 복잡도의 작업. 토폴로지 정렬, 성능 모니터링, 메모리 최적화 등 고급 시스템 프로그래밍이 필요."
		}
	]
}