{
	"meta": {
		"generatedAt": "2025-08-12T14:18:11.929Z",
		"tasksAnalyzed": 12,
		"totalTasks": 33,
		"analysisCount": 12,
		"thresholdScore": 5,
		"projectName": "Taskmaster",
		"usedResearch": false
	},
	"complexityAnalysis": [
		{
			"taskId": 22,
			"taskTitle": "통합 시스템 조정 및 게임 루프 최적화",
			"complexityScore": 9,
			"recommendedSubtasks": 5,
			"expansionPrompt": "40+ FPS 달성을 위한 시스템 실행 순서 최적화, 좌표 변환 캐시 관리, 성능 모니터링, FPS 안정화, 메모리 최적화를 각각 독립적인 하위 작업으로 분해하여 구현하세요.",
			"reasoning": "이미 5개의 세부 하위작업이 존재하며, 시스템 통합, 성능 최적화, 메모리 관리 등 다양한 기술적 도메인을 아우르는 고복잡도 작업입니다. 각 하위작업이 상호 의존적이면서도 독립적인 구현이 가능한 구조로 잘 분해되어 있습니다."
		},
		{
			"taskId": 23,
			"taskTitle": "이벤트 시스템 기본 인프라 구현",
			"complexityScore": 6,
			"recommendedSubtasks": 4,
			"expansionPrompt": "BaseEvent 추상 클래스 구현, EventType IntEnum 다층 구조 설계, IEventSubscriber 인터페이스 정의, 타입 힌트 및 dataclass 적용을 각각 분리하여 구현하세요.",
			"reasoning": "이벤트 시스템의 기본 인프라는 추상 클래스, 인터페이스, Enum 설계 등 아키텍처 설계 요소들을 포함하므로 중간 복잡도입니다. Python 3.13+ 타입 힌트와 다층 Enum 패턴 적용이 필요합니다."
		},
		{
			"taskId": 24,
			"taskTitle": "EventBus 큐잉 시스템 구현",
			"complexityScore": 7,
			"recommendedSubtasks": 5,
			"expansionPrompt": "deque 기반 이벤트 큐 구현, 구독자 관리 Dictionary 시스템, publish/process_events 메서드, 구독자 예외 격리 처리, 성능 모니터링 기능을 각각 분리하여 구현하세요.",
			"reasoning": "큐 기반 이벤트 처리, 구독자 관리, 예외 격리, 재진입 방지 등 복합적인 시스템 설계가 필요하며, 성능과 안정성을 모두 고려해야 하는 중고복잡도 작업입니다."
		},
		{
			"taskId": 25,
			"taskTitle": "게임 이벤트 타입 정의 및 구현",
			"complexityScore": 4,
			"recommendedSubtasks": 3,
			"expansionPrompt": "EnemyDeathEvent 클래스 구현, ProjectileCreatedEvent 클래스 구현, 데이터 검증 및 성능 최적화를 각각 분리하여 구현하세요.",
			"reasoning": "구체적인 이벤트 클래스들을 구현하는 비교적 직관적인 작업이지만, 데이터 검증과 성능 최적화를 고려해야 하므로 중하 복잡도입니다."
		},
		{
			"taskId": 26,
			"taskTitle": "ProjectileSystem 책임 분리 리팩토링",
			"complexityScore": 6,
			"recommendedSubtasks": 4,
			"expansionPrompt": "IEventPublisher 인터페이스 구현, 기존 직접 처리 로직 제거, EnemyDeathEvent 발행 로직 구현, 투사체 제거 로직 단순화를 각각 분리하여 구현하세요.",
			"reasoning": "기존 시스템의 책임을 분리하고 이벤트 기반으로 리팩토링하는 작업으로, 기존 로직 분석과 새로운 아키텍처 적용이 필요한 중간 복잡도입니다."
		},
		{
			"taskId": 27,
			"taskTitle": "ExperienceSystem 이벤트 구독 시스템 구현",
			"complexityScore": 5,
			"recommendedSubtasks": 4,
			"expansionPrompt": "IEventSubscriber 인터페이스 구현, EnemyDeathEvent 구독 로직, 경험치 계산 및 적용 시스템, 엔티티 조회 및 예외 처리를 각각 분리하여 구현하세요.",
			"reasoning": "이벤트 구독 시스템 구현과 경험치 계산 로직을 포함하지만, 비교적 단일 책임을 가진 시스템으로 중간 복잡도입니다."
		},
		{
			"taskId": 28,
			"taskTitle": "ItemDropSystem 및 EntityCleanupSystem 구현",
			"complexityScore": 6,
			"recommendedSubtasks": 4,
			"expansionPrompt": "ItemDropSystem 이벤트 구독 및 아이템 드롭 로직, EntityCleanupSystem 엔티티 제거 로직, 확률적 아이템 생성 시스템, 두 시스템의 독립성 보장을 각각 분리하여 구현하세요.",
			"reasoning": "두 개의 독립적인 시스템을 동시에 구현해야 하며, 확률적 아이템 드롭과 엔티티 생명주기 관리를 다루므로 중간 복잡도입니다."
		},
		{
			"taskId": 29,
			"taskTitle": "GameLoop 이벤트 시스템 통합",
			"complexityScore": 7,
			"recommendedSubtasks": 4,
			"expansionPrompt": "GameLoop에 EventBus 통합, 시스템 구독 관계 자동 설정, 이벤트 처리 순서 관리, SystemOrchestrator 시스템 등록을 각각 분리하여 구현하세요.",
			"reasoning": "전체 게임 루프에 이벤트 시스템을 통합하는 작업으로, 시스템 간 의존성과 실행 순서를 관리해야 하는 중고복잡도입니다."
		},
		{
			"taskId": 30,
			"taskTitle": "이벤트 시스템 단위 테스트 구현",
			"complexityScore": 6,
			"recommendedSubtasks": 5,
			"expansionPrompt": "EventBus 단위 테스트, 이벤트 클래스 테스트, 구독자 인터페이스 Mock 테스트, 예외 상황 처리 테스트, pytest fixture 및 마커 설정을 각각 분리하여 구현하세요.",
			"reasoning": "포괄적인 단위 테스트 작성으로 여러 컴포넌트를 다루며, Mock 객체와 pytest fixture 활용이 필요한 중간 복잡도입니다."
		},
		{
			"taskId": 31,
			"taskTitle": "이벤트 플로우 통합 테스트 구현",
			"complexityScore": 7,
			"recommendedSubtasks": 4,
			"expansionPrompt": "전체 이벤트 플로우 시나리오 테스트, 다중 구독자 동시 처리 검증, 성능 요구사항 테스트, 실제 게임 환경 통합 테스트를 각각 분리하여 구현하세요.",
			"reasoning": "실제 게임 환경에서의 통합 테스트와 성능 요구사항 검증을 포함하여 복합적인 테스트 시나리오가 필요한 중고복잡도입니다."
		},
		{
			"taskId": 32,
			"taskTitle": "이벤트 시스템 성능 최적화 및 모니터링",
			"complexityScore": 8,
			"recommendedSubtasks": 5,
			"expansionPrompt": "EventPerformanceMonitor 구현, 프레임당 이벤트 수 제한, 처리 시간 임계값 모니터링, 성능 경고 시스템, 성능 테스트 구현을 각각 분리하여 구현하세요.",
			"reasoning": "성능 모니터링과 최적화는 실시간 성능 측정, 임계값 관리, 경고 시스템 등 복합적인 성능 엔지니어링이 필요한 고복잡도 작업입니다."
		},
		{
			"taskId": 33,
			"taskTitle": "ProjectileSystem 옵저버 패턴 리팩토링 - Phase 1: 이벤트 정의 및 데이터 구조 설계",
			"complexityScore": 5,
			"recommendedSubtasks": 4,
			"expansionPrompt": "BaseEvent 추상 클래스 구현, EnemyDeathEvent 데이터 구조 설계, EventType Enum 구현, src/core/events/ 디렉토리 구조 생성을 각각 분리하여 구현하세요.",
			"reasoning": "이벤트 시스템의 기초 구조를 설계하는 작업으로, 추상 클래스와 데이터 구조 설계가 주요 과제이지만 비교적 명확한 요구사항을 가진 중간 복잡도입니다."
		}
	]
}